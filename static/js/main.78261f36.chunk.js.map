{"version":3,"sources":["FormTest.js","SheetUtil.js","ReadSheetTest.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["FormItem","Form","Item","NormalLoginForm","values","name","email","handleSubmit","e","preventDefault","_this","props","form","validateFields","err","console","log","_this$props$form","this","getFieldDecorator","getFieldValue","react_default","a","createElement","es_form","onSubmit","className","rules","required","message","input","prefix","icon","type","style","color","placeholder","es_button","htmlType","React","Component","FormTest","create","SHEET_DATA","apiKey","discoveryDocs","spreadsheetId","ReadSheetTest","state","people","error","show","initClient","window","gapi","client","init","then","callback","onLoad","load","sheets","spreadsheets","get","range","response","result","map","person","timestamp","first","data","setState","_this2","ulist","buttonText","i","onClick","handleClick","App","src","logo","alt","src_ReadSheetTest","src_FormTest","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.78261f36.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\r\nimport './FormTest.css';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nclass NormalLoginForm extends React.Component {\r\n  values = {\r\n    name: null,\r\n    email: null\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator, getFieldValue } = this.props.form;\r\n    this.values.name = getFieldValue('name');\r\n    this.values.email = getFieldValue('email');\r\n\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n        <FormItem>\r\n          {getFieldDecorator('name', {\r\n            rules: [{ required: true, message: 'Please input your name!' }],\r\n          })(\r\n            <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Name\" />\r\n          )}\r\n        </FormItem>\r\n        <FormItem>\r\n          {getFieldDecorator('email', {\r\n            rules: [{ required: true, message: 'Please input your email!' }],\r\n          })(\r\n            <Input prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Email\" />\r\n          )}\r\n        </FormItem>\r\n        <FormItem>\r\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n        </FormItem>\r\n        <br />\r\n        <div className=\"login-form-text\"><b>Name:</b> { this.values.name }</div>\r\n        <br />\r\n        <div className=\"login-form-text\"><b>Email:</b> { this.values.email }</div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst FormTest = Form.create()(NormalLoginForm);\r\n\r\nexport default FormTest\r\n","// Based on https://blog.416serg.me/building-an-app-using-google-sheets-api-react-d69681d22ce1\r\n\r\nexport var SHEET_DATA = {\r\n  apiKey: \"AIzaSyD7PTTvLfrZEFrgEexcNlaG4mij5iiJfrM\",\r\n  discoveryDocs: \r\n    [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\r\n  spreadsheetId: \"13ADo7ukhOhJbYvrfMYRgpVIU5W8FiFsU9N9OApTRnfc\"\r\n};\r\n\r\nexport function SHEET_LOAD(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: SHEET_DATA.spreadsheetId,\r\n        range: \"Form Responses 1!A2:E\"\r\n      })\r\n      .then(\r\n        response => {\r\n          const data = response.result.values;\r\n\r\n          const people = data.map(person => ({\r\n            timestamp: person[0],\r\n            email: person[1],\r\n            first: person[2]\r\n          })) || [];\r\n\r\n          callback({\r\n            people\r\n          });\r\n        },\r\n        response => {\r\n          callback(false, response.result.error);\r\n        }\r\n      );\r\n  });\r\n};","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { SHEET_DATA, SHEET_LOAD } from \"./SheetUtil\";\r\n\r\nclass ReadSheetTest extends React.Component {\r\n  state = {\r\n    people: [],\r\n    error: null,\r\n    show: false\r\n  }\r\n  \r\n  initClient = () => {\r\n    window.gapi.client\r\n      .init({\r\n        apiKey: SHEET_DATA.apiKey,\r\n        discoveryDocs: SHEET_DATA.discoveryDocs\r\n      })\r\n      .then(() => {\r\n      SHEET_LOAD(this.onLoad);\r\n    });\r\n  };\r\n  \r\n  onLoad = (data, error) => {\r\n    if (data) {\r\n      const people = data.people;\r\n      this.setState({ people });\r\n    } else {\r\n      this.setState({ error });\r\n    }\r\n  };\r\n    \r\n  componentDidMount() {\r\n    window.gapi.load(\"client\", this.initClient);\r\n  }\r\n    \r\n  handleClick() {\r\n    this.setState({ show: !this.state.show });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <div>{this.state.error}</div>;\r\n    }\r\n    \r\n    var ulist = null;\r\n    var buttonText = \"Show Emails\";\r\n    if (this.state.show) {\r\n        buttonText = \"Hide Emails\";\r\n        ulist = (\r\n          <div>\r\n            <hr />\r\n            <small>\r\n              {this.state.people.map((person, i) => (\r\n                <div>{person.email}</div>\r\n              ))}\r\n            </small>\r\n            <hr />\r\n          </div>\r\n        );\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <Button type=\"primary\" onClick={() => this.handleClick()}>\r\n            {buttonText}\r\n        </Button>\r\n        {ulist}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReadSheetTest\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport FormTest from './FormTest.js';\r\nimport ReadSheetTest from './ReadSheetTest.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Welcome to Great Explorations!\r\n          </p>\r\n          <p>\r\n            <ReadSheetTest />\r\n          </p>\r\n          <p>\r\n            <FormTest />\r\n          </p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}